// Aggregation queries for the 'sales' collection

// 1. Total sales amount for each product category
db.sales.aggregate([
  { $group: { _id: "$category", totalSales: { $sum: "$amount" } } }
]);

// 2. Month-wise total sales amount
db.sales.aggregate([
  { $group: { _id: { $substr: ["$date", 0, 7] }, totalSales: { $sum: "$amount" } } }
]);

// 3. Highest-selling product by revenue
db.sales.aggregate([
  { $group: { _id: "$product", totalRevenue: { $sum: "$amount" } } },
  { $sort: { totalRevenue: -1 } },
  { $limit: 1 }
]);

// 4. Average sale amount
db.sales.aggregate([
  { $group: { _id: null, avgSaleAmount: { $avg: "$amount" } } }
]);

// 5. Number of sales made in each month
db.sales.aggregate([
  { $group: { _id: { $substr: ["$date", 0, 7] }, salesCount: { $sum: 1 } } }
]);

// 6. Total sales per region
db.sales.aggregate([
  { $group: { _id: "$region", totalSales: { $sum: "$amount" } } }
]);

// 7. Top 3 highest revenue-generating products
db.sales.aggregate([
  { $group: { _id: "$product", totalRevenue: { $sum: "$amount" } } },
  { $sort: { totalRevenue: -1 } },
  { $limit: 3 }
]);

// 8. Total number of sales transactions per category
db.sales.aggregate([
  { $group: { _id: "$category", totalTransactions: { $sum: 1 } } }
]);

// 9. Average sales amount per region
db.sales.aggregate([
  { $group: { _id: "$region", avgSaleAmount: { $avg: "$amount" } } }
]);

// 10. Total sales for Electronics and Fashion
db.sales.aggregate([
  { $match: { category: { $in: ["Electronics", "Fashion"] } } },
  { $group: { _id: "$category", totalSales: { $sum: "$amount" } } }
]);

// Aggregation queries for the 'students' collection

// 1. Average marks per subject
db.students.aggregate([
  { $group: { _id: "$subject", avgMarks: { $avg: "$marks" } } }
]);

// 2. Highest and lowest marks in each subject
db.students.aggregate([
  { $group: { _id: "$subject", highestMarks: { $max: "$marks" }, lowestMarks: { $min: "$marks" } } }
]);

// 3. Number of students appearing for each subject
db.students.aggregate([
  { $group: { _id: "$subject", studentCount: { $sum: 1 } } }
]);

// 4. Students scoring above 80 marks
db.students.find({ marks: { $gt: 80 } });

// 5. Total marks obtained by all students
db.students.aggregate([
  { $group: { _id: null, totalMarks: { $sum: "$marks" } } }
]);

// 6. Average marks per class
db.students.aggregate([
  { $group: { _id: "$class", avgMarks: { $avg: "$marks" } } }
]);

// 7. Subject with the highest average marks
db.students.aggregate([
  { $group: { _id: "$subject", avgMarks: { $avg: "$marks" } } },
  { $sort: { avgMarks: -1 } },
  { $limit: 1 }
]);

// 8. Students scoring less than 70 marks categorized as 'Needs Improvement'
db.students.aggregate([
  { $match: { marks: { $lt: 70 } } },
  { $project: { name: 1, subject: 1, marks: 1, category: "Needs Improvement" } }
]);

// 9. Top 2 highest-scoring students in each subject
db.students.aggregate([
  { $sort: { subject: 1, marks: -1 } },
  { $group: { _id: "$subject", topStudents: { $push: { name: "$name", marks: "$marks" } } } },
  { $project: { topStudents: { $slice: ["$topStudents", 2] } } }
]);

// 10. Pass percentage per subject (students scoring >= 40)
db.students.aggregate([
  { $group: { _id: "$subject", totalStudents: { $sum: 1 }, passed: { $sum: { $cond: [{ $gte: ["$marks", 40] }, 1, 0] } } } },
  { $project: { subject: "$_id", passPercentage: { $multiply: [{ $divide: ["$passed", "$totalStudents"] }, 100] } } }
]);